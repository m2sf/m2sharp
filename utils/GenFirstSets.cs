/* M2Sharp -- Modula-2 to C# Translator & Compiler
 *
 * Copyright (c) 2016 The Modula-2 Software Foundation
 *
 * Author & Maintainer: Benjamin Kowarsch <trijezdci@org.m2sf>
 *
 * @synopsis
 *
 * M2Sharp is a multi-dialect Modula-2 to C# translator and via-C# compiler.
 * It supports the dialects described in the 3rd and 4th editions of Niklaus
 * Wirth's book "Programming in Modula-2" (PIM) published by Springer Verlag,
 * and an extended mode with select features from the revised language by
 * B.Kowarsch and R.Sutcliffe "Modula-2 Revision 2010" (M2R10).
 *
 * In translator mode, M2Sharp translates Modula-2 source to C# source files.
 * In compiler mode, M2Sharp compiles Modula-2 source via C# source files
 * to object code or executables using the host system's C# compiler.
 *
 * @repository
 *
 * https://github.com/m2sf/m2sharp
 *
 * @file
 *
 * GenFirstSets.cs
 * 
 * A class dedicated to producing representations of the first sets used by the parser.
 *
 * @license
 *
 * M2Sharp is free software: you can redistribute and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) either version 2.1
 * or at your choice version 3 as published by the Free Software Foundation.
 * However, you may not alter the copyright, author and license information.
 *
 * M2Sharp is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Read the license for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with M2Sharp. If not, see <https://www.gnu.org/copyleft/lesser.html>.
 *
 * NB: Components in the domain part of email addresses are in reverse order.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace org.m2sf.m2sharp {

    class GenFirstSets {

        public static List<String> genSets() {

            List<String> lines = new List<String>();
            TokenSet set;

            /* * * headline * * */

            lines.Add("/* M2sharp FIRST set initialisers" +
              " -- generated by GenFirstSets.cs */\n\n");

            /* definitionModule */
            set = TokenSet.newFromList(Token.DEFINITION, 0);
            lines.Add("Creating First Set for: DEFINITION MODULE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* import */
            set = TokenSet.newFromList(Token.IMPORT, Token.FROM, 0);
            lines.Add("Creating First Set for: IMPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* qualfiedImport */
            set = TokenSet.newFromList(Token.IMPORT, 0);
            lines.Add("Creating First Set for: QUALIFIED IMPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* unqualfiedImport */
            set = TokenSet.newFromList(Token.FROM, 0);
            lines.Add("Creating First Set for: UNQUALIFIED IMPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* identList */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: IDENT LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* definition */
            set = TokenSet.newFromList
              (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: DEFINITION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* constDefinition */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: CONST DEFINITION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* typeDefinition */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: TYPE DEFINITION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* type */
            set = TokenSet.newFromList
              (Token.Identifier, Token.LeftBracket, Token.LeftParen,
               Token.SET, Token.ARRAY, Token.RECORD, Token.POINTER, Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* derivedOrSubRangeType */
            set = TokenSet.newFromList(Token.Identifier, Token.LeftBracket, 0);
            lines.Add("Creating First Set for: DERIVED OR SUBRange TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* qualident */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: QUALIDENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Range */
            set = TokenSet.newFromList(Token.LeftBracket, 0);
            lines.Add("Creating First Set for: Range \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* enumType */
            set = TokenSet.newFromList(Token.LeftParen, 0);
            lines.Add("Creating First Set for: ENUM TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* setType */
            set = TokenSet.newFromList(Token.SET, 0);
            lines.Add("Creating First Set for: SET TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* countableType */
            set = TokenSet.newFromList
              (Token.LeftBracket, Token.LeftParen, Token.Identifier, 0);
            lines.Add("Creating First Set for: COUNTABLE TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* arrayType */
            set = TokenSet.newFromList(Token.ARRAY, 0);
            lines.Add("Creating First Set for: ARRAY TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* extensibleRecordType */
            set = TokenSet.newFromList(Token.RECORD, 0);
            lines.Add("Creating First Set for: EXTENSIBLE RECORD TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* fieldListSequence */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: FIELD LIST SEQUENCE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantRecordType */
            set = TokenSet.newFromList(Token.RECORD, 0);
            lines.Add("Creating First Set for: VARIANT RECORD TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantFieldListSeq */
            set = TokenSet.newFromList(Token.Identifier, Token.CASE, 0);
            lines.Add("Creating First Set for: VARIANT FIELD LIST SEQ \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantFieldList */
            set = TokenSet.newFromList(Token.Identifier, Token.CASE, 0);
            lines.Add("Creating First Set for: VARIANT FIELD LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantFields */
            set = TokenSet.newFromList(Token.CASE, 0);
            lines.Add("Creating First Set for: VARIANT FIELDS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variant */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: VARIANT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* caseLabelList */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: CASE LABEL LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* caseLabels */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: CASE LABELS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* pointerType */
            set = TokenSet.newFromList(Token.POINTER, 0);
            lines.Add("Creating First Set for: POINTER TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureType */
            set = TokenSet.newFromList(Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: PROCEDURE TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleFormalType */
            set = TokenSet.newFromList(Token.ARRAY, Token.Identifier, 0);
            lines.Add("Creating First Set for: SIMPLE FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureHeader */
            set = TokenSet.newFromList(Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: PROCEDURE HEADER \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureSignature */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: PROCEDURE SIGNATURE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleFormalParams */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: SIMPLE FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* implementationModule */
            set = TokenSet.newFromList(Token.IMPLEMENTATION, 0);
            lines.Add("Creating First Set for: IMPLEMENTATION MODULE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* programModule */
            set = TokenSet.newFromList(Token.MODULE, 0);
            lines.Add("Creating First Set for: PROGRAM MODULE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* modulePriority */
            set = TokenSet.newFromList(Token.LeftBracket, 0);
            lines.Add("Creating First Set for: MODULE PRIORITY \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* block */
            set = TokenSet.newFromList
              (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
               Token.BEGIN, Token.END, 0);
            lines.Add("Creating First Set for: BLOCK \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* declaration */
            set = TokenSet.newFromList
              (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE, 0);
            lines.Add("Creating First Set for: DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* typeDeclaration */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: TYPE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* varSizeRecordType */
            set = TokenSet.newFromList(Token.VAR, 0);
            lines.Add("Creating First Set for: VAR SIZE RECORD TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variableDeclaration */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: VARIABLE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureDeclaration */
            set = TokenSet.newFromList(Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: PROCEDURE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* moduleDeclaration */
            set = TokenSet.newFromList(Token.MODULE, 0);
            lines.Add("Creating First Set for: MODULE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* export */
            set = TokenSet.newFromList(Token.EXPORT, 0);
            lines.Add("Creating First Set for: EXPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* statementSequence */
            set = TokenSet.newFromList
              (Token.Identifier, Token.RETURN, Token.WITH, Token.IF, Token.CASE,
               Token.LOOP, Token.WHILE, Token.REPEAT, Token.FOR, Token.EXIT, 0);
            lines.Add("Creating First Set for: STATEMENT SEQUENCE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* statement */
            set = TokenSet.newFromList
              (Token.Identifier, Token.RETURN, Token.WITH, Token.IF, Token.CASE,
               Token.LOOP, Token.WHILE, Token.REPEAT, Token.FOR, Token.EXIT, 0);
            lines.Add("Creating First Set for: STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* AssignmentOrProcCall */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: AssignMENT OR PROC CALL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* actualParameters */
            set = TokenSet.newFromList(Token.LeftParen, 0);
            lines.Add("Creating First Set for: ACTUAL PARAMETERS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* expressionList */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: EXPRESSION LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* returnStatement */
            set = TokenSet.newFromList(Token.RETURN, 0);
            lines.Add("Creating First Set for: RETURN STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* withStatement */
            set = TokenSet.newFromList(Token.WITH, 0);
            lines.Add("Creating First Set for: WITH STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* ifStatement */
            set = TokenSet.newFromList(Token.IF, 0);
            lines.Add("Creating First Set for: IF STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* caseStatement */
            set = TokenSet.newFromList(Token.CASE, 0);
            lines.Add("Creating First Set for: CASE STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* case */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: CASE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* loopStatement */
            set = TokenSet.newFromList(Token.LOOP, 0);
            lines.Add("Creating First Set for: LOOP STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* whileStatement */
            set = TokenSet.newFromList(Token.WHILE, 0);
            lines.Add("Creating First Set for: WHILE STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* repeatStatement */
            set = TokenSet.newFromList(Token.REPEAT, 0);
            lines.Add("Creating First Set for: REPEAT STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* forStatement */
            set = TokenSet.newFromList(Token.FOR, 0);
            lines.Add("Creating First Set for: FOR STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* designator */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: DESIGNATOR \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* selector */
            set = TokenSet.newFromList
              (Token.Deref, Token.Period, Token.LeftBracket, 0);
            lines.Add("Creating First Set for: SELECTOR \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* expression */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: EXPRESSION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleExpression */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: SIMPLE EXPRESSION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* term */
            set = TokenSet.newFromList
              (Token.NOT, Token.IntLiteral, Token.RealLiteral, Token.CharLiteral, Token.StringLiteral,
               Token.LeftBrace, Token.LeftParen, Token.Identifier, 0);
            lines.Add("Creating First Set for: TERM \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleTerm */
            set = TokenSet.newFromList
              (Token.NOT, Token.IntLiteral, Token.RealLiteral, Token.CharLiteral, Token.StringLiteral,
               Token.LeftBrace, Token.LeftParen, Token.Identifier, 0);
            lines.Add("Creating First Set for: SIMPLE TERM \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* factor */
            set = TokenSet.newFromList
              (Token.IntLiteral, Token.RealLiteral, Token.CharLiteral, Token.StringLiteral,
               Token.LeftBrace, Token.LeftParen, Token.Identifier, 0);
            lines.Add("Creating First Set for: FACTOR \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* designatorOrFuncCall */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating First Set for: DESIGNATOR OR FUNC CALL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* setValue */
            set = TokenSet.newFromList(Token.LeftBrace, 0);
            lines.Add("Creating First Set for: SET VALUE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* element */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.NOT, Token.IntLiteral, Token.RealLiteral,
               Token.CharLiteral, Token.StringLiteral, Token.LeftBrace, Token.LeftParen,
               Token.Identifier, 0);
            lines.Add("Creating First Set for: ELEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Option dependent FIRST sets */

            /* formalType */
            set = TokenSet.newFromList
              (Token.ARRAY, Token.CONST, Token.VAR, Token.Identifier, 0);
            lines.Add("Creating First Set for: FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* attributedFormalType */
            set = TokenSet.newFromList(Token.CONST, Token.VAR, 0);
            lines.Add("Creating First Set for: ATTRIBUTED FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* formalParamList */
            set = TokenSet.newFromList
              (Token.Identifier, Token.CONST, Token.VAR, 0);
            lines.Add("Creating First Set for: FORMAL PARAM LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* formalParams */
            set = TokenSet.newFromList
              (Token.Identifier, Token.CONST, Token.VAR, 0);
            lines.Add("Creating First Set for: FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* attribFormalParams */
            set = TokenSet.newFromList(Token.CONST, Token.VAR, 0);
            lines.Add("Creating First Set for: ATTRIB FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* typeDeclarationTail */
            set = TokenSet.newFromList
              (Token.VAR, Token.Identifier, Token.LeftBracket, Token.LeftParen,
               Token.SET, Token.ARRAY, Token.RECORD, Token.POINTER, Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: TYPE DECLARATION TAIL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative FIRST sets */

            /* Alternative formalType */
            set = TokenSet.newFromList
              (Token.ARRAY, Token.VAR, Token.Identifier, 0);
            lines.Add("Creating First Set for: ALT FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative attributedFormalType */
            set = TokenSet.newFromList(Token.VAR, 0);
            lines.Add("Creating First Set for: ALT ATTRIB FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative formalParamList */
            set = TokenSet.newFromList(Token.Identifier, Token.VAR, 0);
            lines.Add("Creating First Set for: ALT FORMAL PARAM LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative formalParams */
            set = TokenSet.newFromList(Token.Identifier, Token.VAR, 0);
            lines.Add("Creating First Set for: ALT FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative attribFormalParams */
            set = TokenSet.newFromList(Token.VAR, 0);
            lines.Add("Creating First Set for: ALT ATTRIB FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative typeDeclarationTail */
            set = TokenSet.newFromList
              (Token.Identifier, Token.LeftBracket, Token.LeftParen,
               Token.SET, Token.ARRAY, Token.RECORD, Token.POINTER, Token.PROCEDURE, 0);
            lines.Add("Creating First Set for: ALT TYPE DECL TAIL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            return lines;

        } /* end genSets */

    } /* end GenFirstSets */

} /* end namespace */
