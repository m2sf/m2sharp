/* M2Sharp -- Modula-2 to C# Translator & Compiler
 *
 * Copyright (c) 2016 The Modula-2 Software Foundation
 *
 * Author & Maintainer: Benjamin Kowarsch <trijezdci@org.m2sf>
 *
 * @synopsis
 *
 * M2Sharp is a multi-dialect Modula-2 to C# translator and via-C# compiler.
 * It supports the dialects described in the 3rd and 4th editions of Niklaus
 * Wirth's book "Programming in Modula-2" (PIM) published by Springer Verlag,
 * and an extended mode with select features from the revised language by
 * B.Kowarsch and R.Sutcliffe "Modula-2 Revision 2010" (M2R10).
 *
 * In translator mode, M2Sharp translates Modula-2 source to C# source files.
 * In compiler mode, M2Sharp compiles Modula-2 source via C# source files
 * to object code or executables using the host system's C# compiler.
 *
 * @repository
 *
 * https://github.com/m2sf/m2sharp
 *
 * @file
 *
 * GenResyncSets.cs
 * 
 * A class dedicated to producing representations of the skip sets used by the parser.
 *
 * @license
 *
 * M2Sharp is free software: you can redistribute and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) either version 2.1
 * or at your choice version 3 as published by the Free Software Foundation.
 * However, you may not alter the copyright, author and license information.
 *
 * M2Sharp is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Read the license for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with M2Sharp. If not, see <https://www.gnu.org/copyleft/lesser.html>.
 *
 * NB: Components in the domain part of email addresses are in reverse order.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace org.m2sf.m2sharp
{
    class GenResyncSets
    {
        public static List<String> genSets()
        {

            TokenSet set;
            List<String> lines = new List<String>();

            lines.Add("/* M2C resync set initialisers" +
    " -- generated by gen resync sets.c */\n\n");

            /* Resync to Resync(import) or Resync(definition) or END */

            set = TokenSet.newFromList
              (/* Resync(import) */
               Token.IMPORT, Token.FROM,
                /* Resync(definition) */
               Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE,
                /* END */
               Token.END,
                /* EOF */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: IMPORT OR DEFINITON OR END \\\n  ");
            lines.Add(set.PrintLiteral());
            lines.Add("\n");

            /* Resync to IMPORT or Ident or Semicolon */

            set = TokenSet.newFromList
              (Token.IMPORT, Token.Identifier, Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: IMPORT OR IDENT OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Ident or Semicolon */

            set = TokenSet.newFromList
              (Token.Identifier, Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: IDENT OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Comma or Semicolon */

            set = TokenSet.newFromList
              (Token.Comma, Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: Comma OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(definition) or Ident or Semicolon */

            set = TokenSet.newFromList
              (/* Resync(definition) */
               Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE,
                /* Ident or Semicolon */
               Token.Identifier, Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: DEFINITION OR IDENT OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(definition) or Semicolon */

            set = TokenSet.newFromList
              (/* Resync(definition) */
               Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE,
                /* Semicolon */
               Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: DEFINITION OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(type) or Comma or OF */

            set = TokenSet.newFromList
              (/* Resync(type) */
               Token.ARRAY, Token.POINTER, Token.PROCEDURE, Token.RECORD, Token.SET,
               Token.Identifier, Token.LeftParen, Token.LeftBracket,
                /* Comma or OF */
               Token.Comma, Token.OF,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: TYPE OR Comma OR OF \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Semicolon or END */

            set = TokenSet.newFromList
              (Token.Semicolon, Token.END,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: Semicolon OR END \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to ELSE or END */

            set = TokenSet.newFromList
              (Token.ELSE, Token.END,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: ELSE OR END \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Comma or RightParen */

            set = TokenSet.newFromList
              (Token.Comma, Token.RightParen,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating " +
              "Resync Set: Comma OR RightParen \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Colon or Semicolon */

            set = TokenSet.newFromList
              (Token.Colon, Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: Colon OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(import) or Resync(block) */

            set = TokenSet.newFromList
              (/* Resync(import) */
               Token.IMPORT, Token.FROM,
                /* Resync(block) */
               Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
               Token.BEGIN, Token.END,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: IMPORT OR BLOCK \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(declaration) or Ident or Semicolon */

            set = TokenSet.newFromList
              (/* Resync(declaration) */
               Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
                /* Ident or Semicolon */
               Token.Identifier, Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: DECLARATION OR IDENT OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(declaration) or Semicolon */

            set = TokenSet.newFromList
              (/* Resync(declaration) */
               Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
                /* Semicolon */
               Token.Semicolon,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: DECLARATION OR Semicolon \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to Resync(statement) or FOLLOW(statement) */

            set = TokenSet.newFromList
              (/* Resync(statement) */
               Token.Identifier, Token.RETURN, Token.WITH, Token.IF, Token.CASE,
               Token.LOOP, Token.WHILE, Token.REPEAT, Token.FOR, Token.EXIT,
                /* FOLLOW(statement) */
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: FIRST OR FOLLOW OF STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to ELSIF or ELSE or END */

            set = TokenSet.newFromList
              (Token.ELSIF, Token.ELSE, Token.END,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: ELSIF OR ELSE OR END \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Resync to DO in FOR loop */

            set = TokenSet.newFromList
              (Token.DO,
                /* EOF -- in case nothing else matches */
               Token.EndOfFile, 0);
            lines.Add("Creating Resync Set: FOR LOOP BODY \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            return lines;
        }

    }
}
