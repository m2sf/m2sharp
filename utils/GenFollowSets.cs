/* M2Sharp -- Modula-2 to C# Translator & Compiler
 *
 * Copyright (c) 2016 The Modula-2 Software Foundation
 *
 * Author & Maintainer: Benjamin Kowarsch <trijezdci@org.m2sf>
 *
 * @synopsis
 *
 * M2Sharp is a multi-dialect Modula-2 to C# translator and via-C# compiler.
 * It supports the dialects described in the 3rd and 4th editions of Niklaus
 * Wirth's book "Programming in Modula-2" (PIM) published by Springer Verlag,
 * and an extended mode with select features from the revised language by
 * B.Kowarsch and R.Sutcliffe "Modula-2 Revision 2010" (M2R10).
 *
 * In translator mode, M2Sharp translates Modula-2 source to C# source files.
 * In compiler mode, M2Sharp compiles Modula-2 source via C# source files
 * to object code or executables using the host system's C# compiler.
 *
 * @repository
 *
 * https://github.com/m2sf/m2sharp
 *
 * @file
 *
 * GenFollowSets.cs
 * 
 * A class dedicated to producing representations of the follow sets used by the parser.
 *
 * @license
 *
 * M2Sharp is free software: you can redistribute and/or modify it under the
 * terms of the GNU Lesser General Public License (LGPL) either version 2.1
 * or at your choice version 3 as published by the Free Software Foundation.
 * However, you may not alter the copyright, author and license information.
 *
 * M2Sharp is distributed in the hope that it will be useful,  but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  Read the license for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with M2Sharp. If not, see <https://www.gnu.org/copyleft/lesser.html>.
 *
 * NB: Components in the domain part of email addresses are in reverse order.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace org.m2sf.m2sharp
{

    class GenFollowSets {

        public static List<String> genSets() {


            List<String> lines = new List<String>();
            TokenSet set;

            lines.Add("/* M2sharp FOLLOW Set initialisers" +
             " -- generated by GenFirstSets.cs */\n\n");

            /* definitionModule */
            set = TokenSet.newFromList(Token.DEFINITION, 0);
            lines.Add("Creating Follow Set for: DEFINITION MODULE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* import */
            set = TokenSet.newFromList
              (Token.DEFINITION, Token.BEGIN, Token.CONST, Token.END, Token.MODULE,
               Token.PROCEDURE, Token.TYPE, Token.VAR, Token.EXPORT, 0);
            lines.Add("Creating Follow Set for: IMPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* qualfiedImport */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: QUALIFIED IMPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* unqualfiedImport */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: UNQUALIFIED IMPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* identList */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.Colon, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: IDENT LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* definition */
            set = TokenSet.newFromList(Token.END, 0);
            lines.Add("Creating Follow Set for: DEFINITION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* constDefinition */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: CONST DEFINITION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* typeDefinition */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: TYPE DEFINITION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* type */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* derivedOrSubRangeType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: DERIVED OR SUBRange TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* qualident */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.LeftBracket, Token.Comma, Token.OF,
               Token.RightParen, Token.Assign, Token.LeftParen, Token.END,
               Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, Token.LeftBrace,
               Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
               Token.Plus, Token.Minus, Token.OR, Token.Equal, Token.NotEqual,
               Token.Less, Token.LessEqual, Token.Greater, Token.GreaterEqual,
               Token.IN, Token.THEN, Token.DO, Token.TO, Token.BY,
               Token.Range, Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: QUALIDENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Range */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.Comma, Token.OF, 0);
            lines.Add("Creating Follow Set for: Range \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* enumType */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.Comma, Token.OF, 0);
            lines.Add("Creating Follow Set for: ENUM TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* setType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: SET TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* countableType */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.Comma, Token.OF, 0);
            lines.Add("Creating Follow Set for: COUNTABLE TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* arrayType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: ARRAY TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* extensibleRecordType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: EXTENSIBLE RECORD TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* fieldListSequence */
            set = TokenSet.newFromList(Token.END, Token.VAR, 0);
            lines.Add("Creating Follow Set for: FIELD LIST SEQUENCE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantRecordType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: VARIANT RECORD TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantFieldListSeq */
            set = TokenSet.newFromList
              (Token.Bar, Token.ELSE, Token.END, 0);
            lines.Add("Creating Follow Set for: VARIANT FIELD LIST SEQ \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantFieldList */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.Bar, Token.ELSE, Token.END, 0);
            lines.Add("Creating Follow Set for: VARIANT FIELD LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variantFields */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.Bar, Token.ELSE, Token.END, 0);
            lines.Add("Creating Follow Set for: VARIANT FIELDS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variant */
            set = TokenSet.newFromList
              (Token.Bar, Token.ELSE, Token.END, 0);
            lines.Add("Creating Follow Set for: VARIANT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* caseLabelList */
            set = TokenSet.newFromList(Token.Colon, 0);
            lines.Add("Creating Follow Set for: CASE LABEL LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* caseLabels */
            set = TokenSet.newFromList
              (Token.Comma, Token.Colon, 0);
            lines.Add("Creating Follow Set for: CASE LABELS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* pointerType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: POINTER TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: PROCEDURE TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleFormalType */
            set = TokenSet.newFromList
              (Token.Comma, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: SIMPLE FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureHeader */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: PROCEDURE HEADER \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureSignature */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: PROCEDURE SIGNATURE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleFormalParams */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: SIMPLE FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());
            lines.Add("\n");

            /* implementationModule */
            set = TokenSet.newFromList(Token.EndOfFile, 0);
            lines.Add("Creating Follow Set for: IMPLEMENTATION MODULE \\\n  ");
            lines.Add(set.PrintLiteral());
            lines.Add("\n");

            /* programModule */
            set = TokenSet.newFromList(Token.EndOfFile, 0);
            lines.Add("Creating Follow Set for: PROGRAM MODULE \\\n  ");
            lines.Add(set.PrintLiteral());
            lines.Add("\n");

            /* modulePriority */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: MODULE PRIORITY \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* block */
            set = TokenSet.newFromList(Token.Identifier, 0);
            lines.Add("Creating Follow Set for: BLOCK \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* declaration */
            set = TokenSet.newFromList(Token.BEGIN, Token.END, 0);
            lines.Add("Creating Follow Set for: DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* typeDeclaration */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: TYPE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* varSizeRecordType */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: VAR SIZE RECORD TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* variableDeclaration */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: VARIABLE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* procedureDeclaration */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: PROCEDURE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* moduleDeclaration */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: MODULE DECLARATION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* export */
            set = TokenSet.newFromList
              (Token.CONST, Token.TYPE, Token.VAR, Token.PROCEDURE, Token.MODULE,
               Token.BEGIN, Token.END, 0);
            lines.Add("Creating Follow Set for: EXPORT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* statementSequence */
            set = TokenSet.newFromList
              (Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: STATEMENT SEQUENCE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* statement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* AssignmentOrProcCall */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: AssignMENT OR PROC CALL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* actualParameters */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: ACTUAL PARAMETERS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* expressionList */
            set = TokenSet.newFromList(Token.RightParen, 0);
            lines.Add("Creating Follow Set for: EXPRESSION LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* returnStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: RETURN STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* withStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: WITH STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* ifStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: IF STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* caseStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: CASE STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* case */
            set = TokenSet.newFromList
              (Token.Bar, Token.ELSE, Token.END, 0);
            lines.Add("Creating Follow Set for: CASE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* loopStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: LOOP STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* whileStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: WHILE STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* repeatStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: REPEAT STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* forStatement */
            set = TokenSet.newFromList
              (Token.Semicolon,
               Token.END, Token.ELSIF, Token.ELSE, Token.Bar, Token.UNTIL, 0);
            lines.Add("Creating Follow Set for: FOR STATEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* designator */
            set = TokenSet.newFromList
              (Token.Assign, Token.LeftParen, Token.LeftBrace,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD,
               Token.AND, Token.Plus, Token.Minus, Token.OR, Token.Equal,
               Token.NotEqual, Token.Less, Token.LessEqual, Token.Greater,
               Token.GreaterEqual, Token.IN, Token.Comma, Token.RightParen,
               Token.THEN, Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: DESIGNATOR \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* selector */
            set = TokenSet.newFromList
              (Token.Identifier,
               Token.Assign, Token.LeftParen, Token.LeftBrace,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD,
               Token.AND, Token.Plus, Token.Minus, Token.OR, Token.Equal,
               Token.NotEqual, Token.Less, Token.LessEqual, Token.Greater,
               Token.GreaterEqual, Token.IN, Token.Comma, Token.RightParen,
               Token.THEN, Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: SELECTOR \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* expression */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: EXPRESSION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleExpression */
            set = TokenSet.newFromList
              (Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
               Token.Greater, Token.GreaterEqual, Token.IN,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: SIMPLE EXPRESSION \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* term */
            set = TokenSet.newFromList
              (Token.Plus, Token.Minus, Token.OR,
               Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
               Token.Greater, Token.GreaterEqual, Token.IN,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: TERM \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* simpleTerm */
            set = TokenSet.newFromList
              (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
               Token.Plus, Token.Minus, Token.OR,
               Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
               Token.Greater, Token.GreaterEqual, Token.IN,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: SIMPLE TERM \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* factor */
            set = TokenSet.newFromList
              (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
               Token.Plus, Token.Minus, Token.OR,
               Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
               Token.Greater, Token.GreaterEqual, Token.IN,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: FACTOR \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* designatorOrFuncCall */
            set = TokenSet.newFromList
              (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
               Token.Plus, Token.Minus, Token.OR,
               Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
               Token.Greater, Token.GreaterEqual, Token.IN,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: DESIGNATOR OR FUNC CALL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* setValue */
            set = TokenSet.newFromList
              (Token.Asterisk, Token.Solidus, Token.DIV, Token.MOD, Token.AND,
               Token.Plus, Token.Minus, Token.OR,
               Token.Equal, Token.NotEqual, Token.Less, Token.LessEqual,
               Token.Greater, Token.GreaterEqual, Token.IN,
               Token.Semicolon, Token.END, Token.ELSIF, Token.ELSE, Token.Bar,
               Token.UNTIL, Token.Comma, Token.RightParen, Token.THEN,
               Token.OF, Token.DO, Token.TO, Token.BY, Token.Range,
               Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: SET VALUE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* element */
            set = TokenSet.newFromList
              (Token.Comma, Token.RightBrace, 0);
            lines.Add("Creating Follow Set for: ELEMENT \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Option dependent FOLLOW sets */

            /* formalType */
            set = TokenSet.newFromList
              (Token.Comma, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* attributedFormalType */
            set = TokenSet.newFromList
              (Token.Comma, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ATTRIBUTED FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* formalParamList */
            set = TokenSet.newFromList(Token.RightParen, 0);
            lines.Add("Creating Follow Set for: FORMAL PARAM LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* formalParams */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* attribFormalParams */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ATTRIB FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* typeDeclarationTail */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: TYPE DECLARATION TAIL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative FOLLOW sets */

            /* Alternative formalType */
            set = TokenSet.newFromList
              (Token.Comma, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ALT FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative attributedFormalType */
            set = TokenSet.newFromList
              (Token.Comma, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ALT ATTRIB FORMAL TYPE \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative formalParamList */
            set = TokenSet.newFromList(Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ALT FORMAL PARAM LIST \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative formalParams */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ALT FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative attribFormalParams */
            set = TokenSet.newFromList
              (Token.Semicolon, Token.RightParen, 0);
            lines.Add("Creating Follow Set for: ALT ATTRIB FORMAL PARAMS \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            /* Alternative typeDeclarationTail */
            set = TokenSet.newFromList(Token.Semicolon, 0);
            lines.Add("Creating Follow Set for: ALT TYPE DECL TAIL \\\n  ");
            lines.Add(set.PrintLiteral());

            lines.Add("\n");

            return lines;
        } /* end genSets */

    } /* end GenFollowSets */

} /* end namespace */
